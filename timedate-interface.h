/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp com.unikylin.Kiran.SystemDaemon.TimeDate.xml -p SystemDaemonTimeDate
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SYSTEMDAEMONTIMEDATE_H_1598928160
#define SYSTEMDAEMONTIMEDATE_H_1598928160

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <QDebug>

struct ZoneInfo{
    QString zone_id;
    QString zone_city;
    qint64  zone_utc;
    friend QDBusArgument& operator<<(QDBusArgument&arg,const ZoneInfo& info) {
        arg.beginStructure();
        arg << info.zone_id;
        arg << info.zone_city;
        arg << info.zone_utc;
        arg.endStructure();
        return arg;
    };
    friend const QDBusArgument& operator>>(const QDBusArgument&arg,ZoneInfo& info){
        arg.beginStructure();
        arg >> info.zone_id;
        arg >> info.zone_city;
        arg >> info.zone_utc;
        arg.endStructure();
        return arg;
    };
    bool operator== (ZoneInfo& other) const{
        if(zone_id==other.zone_id){
            return true;
        }
        return false;
    };
    bool operator!= (ZoneInfo& other) const{
        if(zone_id!=other.zone_id){
            return true;
        }
        return false;
    }
};
typedef QList<ZoneInfo>        TimeZoneList;
typedef QMap<QString,ZoneInfo> TimeZoneMap;

Q_DECLARE_METATYPE(ZoneInfo)
Q_DECLARE_METATYPE(TimeZoneList)

/*
 * Proxy class for interface com.unikylin.Kiran.SystemDaemon.TimeDate
 */
class ComUnikylinKiranSystemDaemonTimeDateInterface: public QDBusAbstractInterface
{
    friend class KiranTimeDateGlobalData;
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.unikylin.Kiran.SystemDaemon.TimeDate"; }
    static ComUnikylinKiranSystemDaemonTimeDateInterface* instance();
    ~ComUnikylinKiranSystemDaemonTimeDateInterface();
private:
    ComUnikylinKiranSystemDaemonTimeDateInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);
private:
    Q_PROPERTY(bool can_ntp READ can_ntp)
    inline bool can_ntp() const
    { return qvariant_cast< bool >(property("can_ntp")); }

    Q_PROPERTY(bool local_rtc READ local_rtc)
    inline bool local_rtc() const
    { return qvariant_cast< bool >(property("local_rtc")); }

    Q_PROPERTY(bool ntp READ ntp)
    inline bool ntp() const
    { return qvariant_cast< bool >(property("ntp")); }

    Q_PROPERTY(qulonglong rtc_time READ rtc_time)
    inline qulonglong rtc_time() const
    { return qvariant_cast< qulonglong >(property("rtc_time")); }

    Q_PROPERTY(qulonglong system_time READ system_time)
    inline qulonglong system_time() const
    { return qvariant_cast< qulonglong >(property("system_time")); }

    Q_PROPERTY(QString time_zone READ time_zone)
    inline QString time_zone() const
    { return qvariant_cast< QString >(property("time_zone")); }

private:
    QPair<bool,QString> handleEventSyncCall(const QString& methondName,const QVariantList& args){
        QPair<bool,QString> res(true,"");
        QDBusPendingCall pendingCall = asyncCallWithArgumentList(methondName,args);
        QDBusPendingCallWatcher watcher(pendingCall);
        QEventLoop loop;

        connect(&watcher,&QDBusPendingCallWatcher::finished,[&res,&loop](QDBusPendingCallWatcher*watcher){
            QDBusMessage msg = watcher->reply();
            if(msg.type()==QDBusMessage::ErrorMessage){
                res = {false,msg.errorMessage()};
            }
            loop.quit();
        });

        if(Q_UNLIKELY(pendingCall.isFinished())){
            if( pendingCall.isError() ){
                res = {false,pendingCall.error().message()};
            }
            return res;
        }

        loop.exec(QEventLoop::ExcludeUserInputEvents);

        return res;
    }
public Q_SLOTS: // METHODS
    ///---------------------------------------------------------------------------
    inline QDBusPendingReply<> SetLocalRTC(bool local, bool adjust_system)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(local) << QVariant::fromValue(adjust_system);
        return asyncCallWithArgumentList(QLatin1String("SetLocalRTC"), argumentList);
    }
    inline QPair<bool,QString> SyncSetLocalRTC(bool local,bool adjust_system)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(local) << QVariant::fromValue(adjust_system);
        return handleEventSyncCall(QLatin1String("SetLocalRTC"), argumentList);
    }
    ///---------------------------------------------------------------------------
    inline QDBusPendingReply<> SetNTP(bool active)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(active);
        return asyncCallWithArgumentList(QLatin1String("SetNTP"), argumentList);
    }
    inline QPair<bool,QString> SyncSetNTP(bool active)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(active);
        return handleEventSyncCall(QLatin1String("SetNTP"), argumentList);
    }
    ///---------------------------------------------------------------------------
    inline QDBusPendingReply<> SetTime(qlonglong requested_time, bool relative)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(requested_time) << QVariant::fromValue(relative);
        return asyncCallWithArgumentList(QLatin1String("SetTime"), argumentList);
    }
    inline QPair<bool,QString> SyncSetTime(qlonglong requested_time,bool relative)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(requested_time) << QVariant::fromValue(relative);
        return handleEventSyncCall(QLatin1String("SetTime"), argumentList);
    }
    ///---------------------------------------------------------------------------
    inline QDBusPendingReply<> SetTimezone(const QString &time_zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(time_zone);
        return asyncCallWithArgumentList(QLatin1String("SetTimezone"), argumentList);
    }
    inline QPair<bool,QString> SyncSetTimeZone(const QString& time_zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(time_zone);
        return handleEventSyncCall(QLatin1String("SetTimezone"), argumentList);
    }
    ///---------------------------------------------------------------------------
private slots:
    void handlePropertiesChanged(QDBusMessage msg);
    inline QDBusPendingReply<TimeZoneList> GetZoneList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetZoneList"), argumentList);
    }
Q_SIGNALS: // SIGNALS
    void propertyChanged(QString propertyName,QVariant value);
};

namespace com {
  namespace unikylin {
    namespace Kiran {
      namespace SystemDaemon {
        typedef ::ComUnikylinKiranSystemDaemonTimeDateInterface TimeDate;
      }
    }
  }
}

using com::unikylin::Kiran::SystemDaemon::TimeDate;
#endif
