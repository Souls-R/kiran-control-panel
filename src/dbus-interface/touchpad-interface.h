/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.kylinsec.Kiran.SessionDaemon.TouchPad.xml -p touchpad-interface
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TOUCHPAD_INTERFACE_H
#define TOUCHPAD_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.kylinsec.Kiran.SessionDaemon.TouchPad
 */
class ComKylinsecKiranSessionDaemonTouchPadInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.kylinsec.Kiran.SessionDaemon.TouchPad"; }

public:
    ComKylinsecKiranSessionDaemonTouchPadInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);
    static ComKylinsecKiranSessionDaemonTouchPadInterface* instance();
    ~ComKylinsecKiranSessionDaemonTouchPadInterface();

    Q_PROPERTY(int click_method READ click_method WRITE setClick_method)
    inline int click_method() const
    { return qvariant_cast< int >(property("click_method")); }
    inline void setClick_method(int value)
    { setProperty("click_method", QVariant::fromValue(value)); }

    Q_PROPERTY(bool disable_while_typing READ disable_while_typing WRITE setDisable_while_typing)
    inline bool disable_while_typing() const
    { return qvariant_cast< bool >(property("disable_while_typing")); }
    inline void setDisable_while_typing(bool value)
    { setProperty("disable_while_typing", QVariant::fromValue(value)); }

    Q_PROPERTY(bool left_handed READ left_handed WRITE setLeft_handed)
    inline bool left_handed() const
    { return qvariant_cast< bool >(property("left_handed")); }
    inline void setLeft_handed(bool value)
    { setProperty("left_handed", QVariant::fromValue(value)); }

    Q_PROPERTY(double motion_acceleration READ motion_acceleration WRITE setMotion_acceleration)
    inline double motion_acceleration() const
    { return qvariant_cast< double >(property("motion_acceleration")); }
    inline void setMotion_acceleration(double value)
    { setProperty("motion_acceleration", QVariant::fromValue(value)); }

    Q_PROPERTY(bool natural_scroll READ natural_scroll WRITE setNatural_scroll)
    inline bool natural_scroll() const
    { return qvariant_cast< bool >(property("natural_scroll")); }
    inline void setNatural_scroll(bool value)
    { setProperty("natural_scroll", QVariant::fromValue(value)); }

    Q_PROPERTY(int scroll_method READ scroll_method WRITE setScroll_method)
    inline int scroll_method() const
    { return qvariant_cast< int >(property("scroll_method")); }
    inline void setScroll_method(int value)
    { setProperty("scroll_method", QVariant::fromValue(value)); }

    Q_PROPERTY(bool tap_to_click READ tap_to_click WRITE setTap_to_click)
    inline bool tap_to_click() const
    { return qvariant_cast< bool >(property("tap_to_click")); }
    inline void setTap_to_click(bool value)
    { setProperty("tap_to_click", QVariant::fromValue(value)); }

    Q_PROPERTY(bool touchpad_enabled READ touchpad_enabled WRITE setTouchpad_enabled)
    inline bool touchpad_enabled() const
    { return qvariant_cast< bool >(property("touchpad_enabled")); }
    inline void setTouchpad_enabled(bool value)
    { setProperty("touchpad_enabled", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace kylinsec {
    namespace Kiran {
      namespace SessionDaemon {
        typedef ::ComKylinsecKiranSessionDaemonTouchPadInterface TouchPad;
      }
    }
  }
}
#endif
