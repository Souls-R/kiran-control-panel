/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.kylinsec.Kiran.SessionDaemon.Appearance.xml -p Appearance
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef APPEARANCE_H
#define APPEARANCE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.kylinsec.Kiran.SessionDaemon.Appearance
 */
class ComKylinsecKiranSessionDaemonAppearanceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.kylinsec.Kiran.SessionDaemon.Appearance"; }

public:
    ComKylinsecKiranSessionDaemonAppearanceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);
    static ComKylinsecKiranSessionDaemonAppearanceInterface *instance();
    ~ComKylinsecKiranSessionDaemonAppearanceInterface();

    Q_PROPERTY(QString desktop_background READ desktop_background)
    inline QString desktop_background() const
    { return qvariant_cast< QString >(property("desktop_background")); }

    Q_PROPERTY(QString lock_screen_background READ lock_screen_background)
    inline QString lock_screen_background() const
    { return qvariant_cast< QString >(property("lock_screen_background")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> GetFont(int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("GetFont"), argumentList);
    }

    inline QDBusPendingReply<QString> GetTheme(int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("GetTheme"), argumentList);
    }

    inline QDBusPendingReply<QString> GetThemes(int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("GetThemes"), argumentList);
    }

    inline QDBusPendingReply<> SetDesktopBackground(const QString &desktop_background)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(desktop_background);
        return asyncCallWithArgumentList(QStringLiteral("SetDesktopBackground"), argumentList);
    }

    inline QDBusPendingReply<> SetFont(int type, const QString &font)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(font);
        return asyncCallWithArgumentList(QStringLiteral("SetFont"), argumentList);
    }

    inline QDBusPendingReply<> SetLockScreenBackground(const QString &lock_screen_background)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(lock_screen_background);
        return asyncCallWithArgumentList(QStringLiteral("SetLockScreenBackground"), argumentList);
    }

    inline QDBusPendingReply<> SetTheme(int type, const QString &theme_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(theme_name);
        return asyncCallWithArgumentList(QStringLiteral("SetTheme"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ThemeChanged(int type, const QString &theme_name);
};

namespace com {
  namespace kylinsec {
    namespace Kiran {
      namespace SessionDaemon {
        typedef ::ComKylinsecKiranSessionDaemonAppearanceInterface Appearance;
      }
    }
  }
}
#endif
