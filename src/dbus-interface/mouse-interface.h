/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.kylinsec.Kiran.SessionDaemon.Mouse.xml -p mouse-interface
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MOUSE_INTERFACE_H
#define MOUSE_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.kylinsec.Kiran.SessionDaemon.Mouse
 */
class ComKylinsecKiranSessionDaemonMouseInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.kylinsec.Kiran.SessionDaemon.Mouse"; }

public:
    ComKylinsecKiranSessionDaemonMouseInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ComKylinsecKiranSessionDaemonMouseInterface();

    Q_PROPERTY(int double_click READ double_click WRITE setDouble_click)
    inline int double_click() const
    { return qvariant_cast< int >(property("double_click")); }
    inline void setDouble_click(int value)
    { setProperty("double_click", QVariant::fromValue(value)); }

    Q_PROPERTY(bool left_handed READ left_handed WRITE setLeft_handed)
    inline bool left_handed() const
    { return qvariant_cast< bool >(property("left_handed")); }
    inline void setLeft_handed(bool value)
    { setProperty("left_handed", QVariant::fromValue(value)); }

    Q_PROPERTY(bool middle_emulation_enabled READ middle_emulation_enabled WRITE setMiddle_emulation_enabled)
    inline bool middle_emulation_enabled() const
    { return qvariant_cast< bool >(property("middle_emulation_enabled")); }
    inline void setMiddle_emulation_enabled(bool value)
    { setProperty("middle_emulation_enabled", QVariant::fromValue(value)); }

    Q_PROPERTY(double motion_acceleration READ motion_acceleration WRITE setMotion_acceleration)
    inline double motion_acceleration() const
    { return qvariant_cast< double >(property("motion_acceleration")); }
    inline void setMotion_acceleration(double value)
    { setProperty("motion_acceleration", QVariant::fromValue(value)); }

    Q_PROPERTY(bool natural_scroll READ natural_scroll WRITE setNatural_scroll)
    inline bool natural_scroll() const
    { return qvariant_cast< bool >(property("natural_scroll")); }
    inline void setNatural_scroll(bool value)
    { setProperty("natural_scroll", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace kylinsec {
    namespace Kiran {
      namespace SessionDaemon {
        typedef ::ComKylinsecKiranSessionDaemonMouseInterface Mouse;
      }
    }
  }
}
#endif
