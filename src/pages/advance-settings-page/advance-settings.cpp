 /**
  * @Copyright (C) 2020 ~ 2021 KylinSec Co., Ltd.
  *
  * Author:     liuxinhao <liuxinhao@kylinos.com.cn>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; If not, see <http: //www.gnu.org/licenses/>. 
  */
 
#include "advance-settings.h"
#include "global-defines.h"
#include "ui_advance-settings.h"
#include "uid-validator.h"

#include <kiran-switch-button.h>
#include <widget-property-helper.h>
#include <QDebug>
#include <QDir>
#include <QFileInfo>
#include <QIcon>

AdvanceSettings::AdvanceSettings(QWidget *parent)
    : KiranTitlebarWindow(parent),
      ui(new Ui::AdvanceSettings),
      m_isConfirm(false)
{
    ui->setupUi(getWindowContentWidget());
    initUI();
}

AdvanceSettings::~AdvanceSettings()
{
    delete ui;
}

///更新信息
void AdvanceSettings::setInfo(QString userName, AdvanceSettingsInfo &info)
{
    if (!info.uid.isEmpty())
    {
        m_specifyUserIDSwitch->setChecked(true);
        ui->edit_userID->setText(info.uid);
    }
    else
    {
        m_specifyUserIDSwitch->setChecked(false);
    }

    if (!info.shell.isEmpty())
    {
        ui->edit_loginShell->setText(info.shell);
    }
    else
    {
        ui->edit_loginShell->clear();
    }

    ///缓存账用户信息，当特殊用户Home目录设置关闭时，重新生成Home目录路径
    m_userName = userName;

    if (!info.homeDir.isEmpty())
    {
        m_specifyUserHomeSwitch->setChecked(true);
        ui->edit_specifyUserHome->setText(info.homeDir);
    }
    else
    {
        m_specifyUserHomeSwitch->setChecked(false);
        ui->edit_specifyUserHome->setText(QString("/home/%1/").arg(m_userName));
    }
}

///当点击确定时，创建用户页面获取用户信息
AdvanceSettingsInfo AdvanceSettings::getInfo()
{
    AdvanceSettingsInfo info;
    if (m_specifyUserIDSwitch->isChecked())
    {
        info.uid = ui->edit_userID->text();
    }
    info.shell = ui->edit_loginShell->text();
    if (m_specifyUserHomeSwitch->isChecked())
    {
        info.homeDir = ui->edit_specifyUserHome->text();
    }
    return info;
}

bool AdvanceSettings::isConfirm()
{
    return m_isConfirm;
}

QSize AdvanceSettings::sizeHint() const
{
    return QSize(510, 550);
}

void AdvanceSettings::initUI()
{
    ///设置窗口模态
    setWindowModality(Qt::ApplicationModal);
    setWindowFlag(Qt::Dialog);
    setWindowFlag(Qt::WindowStaysOnTopHint);

    setTitle(tr("Advance Settings"));
    setIcon(QIcon::fromTheme("user-admin"));
    setResizeable(false);  ///不可重置大小

    m_editTip = new KiranTips(this);
    m_editTip->setAnimationEnable(true);
    m_editTip->setShowPosition(KiranTips::POSITION_BOTTM);

    /// shell
    ui->edit_loginShell->setText(DEFAULT_SHELL);

    /// user id
    m_specifyUserIDSwitch = new KiranSwitchButton(this);
    ui->layout_specifyUserID->addWidget(m_specifyUserIDSwitch);

    ui->edit_userID->setValidator(new UidValidator(ui->edit_userID));
    ui->edit_userID->setEnabled(false);
    ui->edit_userID->setPlaceholderText(tr("Automatically generated by system"));
    connect(m_specifyUserIDSwitch, &KiranSwitchButton::toggled, [this](bool checked) {
        if (checked)
        {
            ui->edit_userID->setEnabled(true);
            ui->edit_userID->setPlaceholderText("");
        }
        else
        {
            ui->edit_userID->setEnabled(false);
            ui->edit_userID->setPlaceholderText(tr("Automatically generated by system"));
            ui->edit_userID->clear();
        }
    });

    /// home dir
    m_specifyUserHomeSwitch = new KiranSwitchButton(this);
    ui->layout_specifyUserHome->addWidget(m_specifyUserHomeSwitch);

    ui->edit_specifyUserHome->setEnabled(false);
    connect(m_specifyUserHomeSwitch, &KiranSwitchButton::toggled, [this](bool checked) {
        if (checked)
        {
            ui->edit_specifyUserHome->setEnabled(true);
        }
        else
        {
            ui->edit_specifyUserHome->setEnabled(false);
            ui->edit_specifyUserHome->setText(QString("/home/%1/").arg(m_userName));
        }
    });

    /// confirm,cancel
    Kiran::WidgetPropertyHelper::setButtonType(ui->btn_confirm, Kiran::BUTTON_Default);
    connect(ui->btn_confirm, &QPushButton::clicked, [this]() {
        QFileInfo fileInfo;
        ///数据校验
        //shell
        QString shellPath = ui->edit_loginShell->text();
        fileInfo.setFile(shellPath);
        if (shellPath.isEmpty() || (!fileInfo.exists()))
        {
            m_editTip->setText(tr("Please enter the correct path"));
            m_editTip->showTipAroundWidget(ui->edit_loginShell);
            return;
        }
        //uid
        if (m_specifyUserIDSwitch->isChecked() &&
            ui->edit_userID->text().isEmpty())
        {
            m_editTip->setText(tr("Please enter specify user Id"));
            m_editTip->showTipAroundWidget(ui->edit_userID);
            return;
        }
        //home
        QString homePath = ui->edit_specifyUserHome->text();
        if (homePath.isEmpty())
        {
            m_editTip->setText(tr("Please enter the correct home directory"));
            m_editTip->showTipAroundWidget(ui->edit_specifyUserHome);
            return;
        }
        m_isConfirm = true;
        close();
    });

    connect(ui->btn_cancel, &QPushButton::clicked, [this]() {
        m_isConfirm = false;
        close();
    });
}

void AdvanceSettings::closeEvent(QCloseEvent *event)
{
    emit sigClose();
    KiranTitlebarWindow::closeEvent(event);
}
